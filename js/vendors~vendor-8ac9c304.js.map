{"version":3,"sources":["webpack:///./node_modules/immer/dist/immer.module.js"],"names":["__webpack_require__","r","__webpack_exports__","process","obj","d","Immer","applyPatches$1","createDraft","finishDraft","DRAFTABLE","isDraft","isDraftable","NOTHING","original","produce","setAutoFreeze","setUseProxies","Symbol","for","DRAFT_STATE","value","Array","isArray","proto","Object","getPrototypeOf","prototype","constructor","base","assign","target","key","has","ownKeys","Reflect","getOwnPropertySymbols","getOwnPropertyNames","concat","shallowCopy","invokeGetters","slice","clone","create","forEach","desc","getOwnPropertyDescriptor","get","Error","call","enumerable","defineProperty","writable","configurable","each","cb","i","length","isEnumerable","prop","thing","hasOwnProperty","is","x","y","ImmerScope","parent","this","drafts","canAutoFreeze","patches","revoke","draft","usePatches","patchListener","inversePatches","leave","current","enter","descriptors","createProxy","clonePotentialDraft","state","assertUnrevoked","peek","source","finalizing","prepareCopy","copy","set","assigned","modified","markChanged","proxyProperty","scope","finalized","revoke$1","revoked","push","JSON","stringify","markChangesSweep","hasArrayChanges","hasObjectChanges","keys","baseValue","undefined","state$1","descriptor","legacyProxy","freeze","willFinalize","result","isReplaced","markChangesRecursively","object","i$1","i$2","createProxy$1","ref","Proxy","revocable","arrayTraps","objectTraps","proxy","source$1","peek$1","isUnchanged","markChanged$1","deleteProperty","owner","setPrototypeOf","fn","arguments","apply","isNaN","parseInt","modernProxy","generatePatches","basePath","assign$1","delta","start","end","path","op","useRemove","replaceCount","path$1","generateArrayPatches","assignedValue","origValue","generateObjectPatches","applyPatches","patch","join","splice","configDefaults","useProxies","autoFreeze","name","onAssign","onDelete","onCopy","config","bind","recipe","this$1","defaultBase","args","len","hasError","Promise","then","processResult","error","isManual","baseDraft","finalize","isFrozen","finalizeTree","root","rootPath","needPatches","finalizeProperty","isDraftProp","immer"],"mappings":"kIAAAA,EAAAC,EAAAC,GAAA,SAAAC,GAAA,IAAAC,EAAAJ,EAAAK,EAAAH,EAAA,0BAAAI,IAAAN,EAAAK,EAAAH,EAAA,iCAAAK,IAAAP,EAAAK,EAAAH,EAAA,gCAAAM,IAAAR,EAAAK,EAAAH,EAAA,gCAAAO,IAAAT,EAAAK,EAAAH,EAAA,8BAAAQ,IAAAV,EAAAK,EAAAH,EAAA,4BAAAS,IAAAX,EAAAK,EAAAH,EAAA,gCAAAU,IAAAZ,EAAAK,EAAAH,EAAA,4BAAAW,IAAAb,EAAAK,EAAAH,EAAA,6BAAAY,IAAAd,EAAAK,EAAAH,EAAA,4BAAAa,IAAAf,EAAAK,EAAAH,EAAA,kCAAAc,IAAAhB,EAAAK,EAAAH,EAAA,kCAAAe,IACA,IAAAJ,EAAA,oBAAAK,cAAA,mBAAAd,EAAA,IAAkF,oBAAAA,GAClFM,EAAA,oBAAAQ,cAAAC,IAAA,wCACAC,EAAA,oBAAAF,cAAAC,IAAA,gCACA,SAAAR,EAAAU,GACA,QAAAA,OAAAD,GAEA,SAAAR,EAAAS,GACA,IAAAA,GAAA,iBAAAA,EAA4C,SAC5C,GAAAC,MAAAC,QAAAF,GAA6B,SAC7B,IAAAG,EAAAC,OAAAC,eAAAL,GACA,OAAAG,OAAAC,OAAAE,cACAN,EAAAX,MAAAW,EAAAO,YAAAlB,IAEA,SAAAI,EAAAO,GACA,GAAAA,KAAAD,GACA,OAAAC,EAAAD,GAAAS,KAIA,IAAAC,EAAAL,OAAAK,QAAA,SAAAC,EAAAV,GACA,QAAAW,KAAAX,EACAY,EAAAZ,EAAAW,KACAD,EAAAC,GAAAX,EAAAW,IAIA,OAAAD,GAEAG,EAAA,oBAAAC,iBAAAD,QAAAC,QAAAD,aAAA,IAAAT,OAAAW,sBAAA,SAAAhC,GAA0J,OAAAqB,OAAAY,oBAAAjC,GAAAkC,OAAAb,OAAAW,sBAAAhC,KAAoFqB,OAAAY,oBAC9O,SAAAE,EAAAV,EAAAW,GAGA,QAFA,IAAAA,OAAA,GAEAlB,MAAAC,QAAAM,GAA4B,OAAAA,EAAAY,QAC5B,IAAAC,EAAAjB,OAAAkB,OAAAlB,OAAAC,eAAAG,IA2BA,OA1BAK,EAAAL,GAAAe,QAAA,SAAAZ,GACA,GAAAA,IAAAZ,EAAA,CAIA,IAAAyB,EAAApB,OAAAqB,yBAAAjB,EAAAG,GACAX,EAAAwB,EAAAxB,MAEA,GAAAwB,EAAAE,IAAA,CACA,IAAAP,EACA,UAAAQ,MAAA,gDAGA3B,EAAAwB,EAAAE,IAAAE,KAAApB,GAGAgB,EAAAK,WACAR,EAAAV,GAAAX,EAEAI,OAAA0B,eAAAT,EAAAV,EAAA,CACAX,QACA+B,UAAA,EACAC,cAAA,OAIAX,EAEA,SAAAY,EAAAjC,EAAAkC,GACA,GAAAjC,MAAAC,QAAAF,GACA,QAAAmC,EAAA,EAAmBA,EAAAnC,EAAAoC,OAAkBD,IAAOD,EAAAC,EAAAnC,EAAAmC,GAAAnC,QAE5Ca,EAAAb,GAAAuB,QAAA,SAAAZ,GAA2C,OAAAuB,EAAAvB,EAAAX,EAAAW,GAAAX,KAG3C,SAAAqC,EAAA7B,EAAA8B,GACA,OAAAlC,OAAAqB,yBAAAjB,EAAA8B,GAAAT,WAEA,SAAAjB,EAAA2B,EAAAD,GACA,OAAAlC,OAAAE,UAAAkC,eAAAZ,KAAAW,EAAAD,GAEA,SAAAG,EAAAC,EAAAC,GAEA,OAAAD,IAAAC,EACA,IAAAD,GAAA,EAAAA,GAAA,EAAAC,EAEAD,MAAAC,KAMA,IAAAC,EAAA,SAAAC,GACAC,KAAAC,OAAA,GACAD,KAAAD,SAGAC,KAAAE,eAAA,EAEAF,KAAAG,QAAA,MA4BA,SAAAC,EAAAC,GACAA,EAAApD,GAAAmD,SA1BAN,EAAAtC,UAAA8C,WAAA,SAAAC,GACAA,IACAP,KAAAG,QAAA,GACAH,KAAAQ,eAAA,GACAR,KAAAO,kBAIAT,EAAAtC,UAAA4C,OAAA,WACAJ,KAAAS,QACAT,KAAAC,OAAAxB,QAAA2B,GACAJ,KAAAC,OAAA,MAGAH,EAAAtC,UAAAiD,MAAA,WACAT,OAAAF,EAAAY,UACAZ,EAAAY,QAAAV,KAAAD,SAGAD,EAAAY,QAAA,KAEAZ,EAAAa,MAAA,WACA,OAAAX,KAAAU,QAAA,IAAAZ,EAAAE,KAAAU,UASA,IAAAE,EAAA,GAkBA,SAAAC,EAAAnD,EAAAqC,GACA,IAAA3C,EAAAD,MAAAC,QAAAM,GACA2C,EAAAS,EAAApD,GACAyB,EAAAkB,EAAA,SAAAb,IAiGA,SAAAa,EAAAb,EAAAT,GACA,IAAAL,EAAAkC,EAAApB,GAEAd,EACAA,EAAAK,aAEA6B,EAAApB,GAAAd,EAAA,CACAQ,cAAA,EACAH,aAEAH,IAAA,WACA,OA7DA,SAAAmC,EAAAvB,GACAwB,EAAAD,GACA,IAAA7D,EAAA+D,EAAAC,EAAAH,GAAAvB,GACA,GAAAuB,EAAAI,WAAyB,OAAAjE,EAEzB,GAAAA,IAAA+D,EAAAF,EAAArD,KAAA8B,IAAA/C,EAAAS,GAEA,OADAkE,EAAAL,GACAA,EAAAM,KAAA7B,GAAAqB,EAAA3D,EAAA6D,GAGA,OAAA7D,EAmDA0B,CAAAoB,KAAA/C,GAAAuC,IAGA8B,IAAA,SAAApE,IAnDA,SAAA6D,EAAAvB,EAAAtC,GAIA,GAHA8D,EAAAD,GACAA,EAAAQ,SAAA/B,IAAA,GAEAuB,EAAAS,SAAA,CACA,GAAA7B,EAAAzC,EAAA+D,EAAAC,EAAAH,GAAAvB,IAA+C,OAC/CiC,EAAAV,GACAK,EAAAL,GAGAA,EAAAM,KAAA7B,GAAAtC,EA0CAoE,CAAAtB,KAAA/C,GAAAuC,EAAAtC,KAMAI,OAAA0B,eAAAqB,EAAAb,EAAAd,GArHAgD,CAAArB,EAAAb,EAAApC,GAAAmC,EAAA7B,EAAA8B,MAGA,IAsOA5B,EAAA4B,EAAAtC,EAtOAyE,EAAA5B,IAAA4B,MAAA7B,EAAAY,QAkBA,OAoNA9C,EAtNAyC,EAsNAb,EAtNAvC,EAsNAC,EArOA,CACAyE,QACAH,UAAA,EACAL,YAAA,EAEAS,WAAA,EACAL,SAAA,GACAxB,SACArC,OACA2C,QACAgB,KAAA,KACAjB,OAAAyB,EACAC,SAAA,GA0NAxE,OAAA0B,eAAApB,EAAA4B,EAAA,CACAtC,QACA6B,YAAA,EACAE,UAAA,IAzNA0C,EAAA1B,OAAA8B,KAAA1B,GACAA,EAGA,SAAAwB,IACA7B,KAAA8B,SAAA,EAGA,SAAAZ,EAAAH,GACA,OAAAA,EAAAM,MAAAN,EAAArD,KAIA,SAAAuD,EAAAZ,EAAAb,GACA,IAAAuB,EAAAV,EAAApD,GAEA,GAAA8D,MAAAI,WAAA,CACAJ,EAAAI,YAAA,EACA,IAAAjE,EAAAmD,EAAAb,GAEA,OADAuB,EAAAI,YAAA,EACAjE,EAGA,OAAAmD,EAAAb,GA6BA,SAAAiC,EAAAV,GACAA,EAAAS,WACAT,EAAAS,UAAA,EACAT,EAAAhB,QAAuB0B,EAAAV,EAAAhB,SAIvB,SAAAqB,EAAAL,GACAA,EAAAM,OAAoBN,EAAAM,KAAAP,EAAAC,EAAArD,OAGpB,SAAAoD,EAAApD,GACA,IAAAqD,EAAArD,KAAAT,GAEA,GAAA8D,EAAA,CACAA,EAAAI,YAAA,EACA,IAAAd,EAAAjC,EAAA2C,EAAAV,OAAA,GAEA,OADAU,EAAAI,YAAA,EACAd,EAGA,OAAAjC,EAAAV,GA2BA,SAAAsD,EAAAD,GACA,QAAAA,EAAAe,QAA+B,UAAAjD,MAAA,uHAAAmD,KAAAC,UAAAf,EAAAH,KAI/B,SAAAmB,EAAAjC,GAKA,QAAAZ,EAAAY,EAAAX,OAAA,EAAiCD,GAAA,EAAQA,IAAA,CACzC,IAAA0B,EAAAd,EAAAZ,GAAApC,GAEA8D,EAAAS,WACArE,MAAAC,QAAA2D,EAAArD,MACAyE,EAAApB,IAAqCU,EAAAV,GAC9BqB,EAAArB,IAAoCU,EAAAV,KAkD3C,SAAAqB,EAAArB,GAOA,IANA,IAAArD,EAAAqD,EAAArD,KACA2C,EAAAU,EAAAV,MAGAgC,EAAA/E,OAAA+E,KAAAhC,GAEAhB,EAAAgD,EAAA/C,OAAA,EAA+BD,GAAA,EAAQA,IAAA,CACvC,IAAAxB,EAAAwE,EAAAhD,GACAiD,EAAA5E,EAAAG,GAEA,QAAA0E,IAAAD,IAAAxE,EAAAJ,EAAAG,GACA,SAIA,IAAAX,EAAAmD,EAAAxC,GACA2E,EAAAtF,KAAAD,GAEA,GAAAuF,IAAA9E,OAAA4E,GAAA3C,EAAAzC,EAAAoF,GACA,SAOA,OAAAD,EAAA/C,SAAAhC,OAAA+E,KAAA3E,GAAA4B,OAGA,SAAA6C,EAAApB,GACA,IAAAV,EAAAU,EAAAV,MACA,GAAAA,EAAAf,SAAAyB,EAAArD,KAAA4B,OAA2C,SAQ3C,IAAAmD,EAAAnF,OAAAqB,yBAAA0B,IAAAf,OAAA,GAEA,SAAAmD,KAAA7D,KAaA,IAAA8D,EAAApF,OAAAqF,OAAA,CACAC,aAvQA,SAAAjB,EAAAkB,EAAAC,GACAnB,EAAA1B,OAAAxB,QAAA,SAAA4B,GACAA,EAAApD,GAAAkE,YAAA,IAGA2B,EAQAtG,EAAAqG,MAAA5F,GAAA0E,WACAO,EAAAP,EAAA1B,SARA0B,EAAAxB,SA4JA,SAAA4C,EAAAC,GACA,GAAAA,GAAA,iBAAAA,EAAA,CACA,IAAAjC,EAAAiC,EAAA/F,GACA,GAAA8D,EAAA,CACA,IAAArD,EAAAqD,EAAArD,KACA2C,EAAAU,EAAAV,MACAkB,EAAAR,EAAAQ,SAEA,GAAApE,MAAAC,QAAA4F,IAoBG,GAAAb,EAAApB,GAAA,CAIH,GAHAU,EAAAV,GACAQ,EAAAjC,QAAA,EAEAe,EAAAf,OAAA5B,EAAA4B,OACA,QAAAD,EAAAgB,EAAAf,OAAgCD,EAAA3B,EAAA4B,OAAiBD,IAAOkC,EAAAlC,IAAA,OAExD,QAAA4D,EAAAvF,EAAA4B,OAAiC2D,EAAA5C,EAAAf,OAAoB2D,IAAS1B,EAAA0B,IAAA,EAG9D,QAAAC,EAAA,EAAqBA,EAAA7C,EAAAf,OAAoB4D,SAEzCX,IAAAhB,EAAA2B,IAAwCH,EAAA1C,EAAA6C,UA9BxC5F,OAAA+E,KAAAhC,GAAA5B,QAAA,SAAAZ,QAEA0E,IAAA7E,EAAAG,IAAAC,EAAAJ,EAAAG,GAGO0D,EAAA1D,IAEPkF,EAAA1C,EAAAxC,KAJA0D,EAAA1D,IAAA,EACA4D,EAAAV,MAOAzD,OAAA+E,KAAA3E,GAAAe,QAAA,SAAAZ,QAEA0E,IAAAlC,EAAAxC,IAAAC,EAAAuC,EAAAxC,KACA0D,EAAA1D,IAAA,EACA4D,EAAAV,QApLAgC,CAAApB,EAAA1B,OAAA,IAIAiC,EAAAP,EAAA1B,UA6PAY,gBAIA,SAAAsC,EAAAzF,EAAAqC,GACA,IAAA4B,EAAA5B,IAAA4B,MAAA7B,EAAAY,QACAK,EAAA,CAEAY,QAEAH,UAAA,EAEAI,WAAA,EAEAL,SAAA,GAEAxB,SAEArC,OAEA2C,MAAA,KAEAJ,OAAA,GAEAoB,KAAA,KAEAjB,OAAA,MAEAgD,EAAAjG,MAAAC,QAAAM,GAEA2F,MAAAC,UAAA,CAAAvC,GAAAwC,GAAAF,MAAAC,UAAAvC,EAAAyC,GACApD,EAAAgD,EAAAhD,OACAqD,EAAAL,EAAAK,MAIA,OAHA1C,EAAAV,MAAAoD,EACA1C,EAAAX,SACAuB,EAAA1B,OAAA8B,KAAA0B,GACAA,EAEA,IAAAD,EAAA,CACA5E,IA+DA,SAAAmC,EAAAvB,GACA,GAAAA,IAAAvC,EAA6B,OAAA8D,EAC7B,IAAAd,EAAAc,EAAAd,OAEA,IAAAc,EAAAS,UAAA1D,EAAAmC,EAAAT,GACA,OAAAS,EAAAT,GAGA,IAAAtC,EAAAwG,EAAA3C,GAAAvB,GAEA,GAAAuB,EAAAa,YAAAnF,EAAAS,GACA,OAAAA,EAIA,GAAA6D,EAAAS,SAAA,CAEA,GAAAtE,IAAAyG,EAAA5C,EAAArD,KAAA8B,GAA6C,OAAAtC,EAE7C+C,EAAAc,EAAAM,KAGA,OAAApB,EAAAT,GAAA2D,EAAAjG,EAAA6D,IAnFAjD,IAAA,SAAAF,EAAA4B,GACA,OAAAA,KAAAkE,EAAA9F,IAGAG,QAAA,SAAAH,GACA,OAAAI,QAAAD,QAAA2F,EAAA9F,KAGA0D,IA8EA,SAAAP,EAAAvB,EAAAtC,GACA,IAAA6D,EAAAS,SAAA,CACA,IAAAc,EAAAqB,EAAA5C,EAAArD,KAAA8B,GAIAoE,EAAA1G,EAAAyC,EAAA2C,EAAApF,QAAA6D,EAAAd,OAAAT,GAAAG,EAAA2C,EAAApF,IAAAsC,KAAAuB,EAAArD,KACA,GAAAkG,EAAsB,SACtBC,EAAA9C,GAKA,OAFAA,EAAAQ,SAAA/B,IAAA,EACAuB,EAAAM,KAAA7B,GAAAtC,GACA,GA1FA4G,eA6FA,SAAA/C,EAAAvB,SAEA+C,IAAAoB,EAAA5C,EAAArD,KAAA8B,SAAAuB,EAAArD,QACAqD,EAAAQ,SAAA/B,IAAA,EACAqE,EAAA9C,IAGAA,EAAAM,aAAmBN,EAAAM,KAAA7B,GACnB,UApGAb,yBAyGA,SAAAoC,EAAAvB,GACA,IAAAuE,EAAAL,EAAA3C,GACArC,EAAAV,QAAAW,yBAAAoF,EAAAvE,GAEAd,IACAA,EAAAO,UAAA,EACAP,EAAAQ,cAAA/B,MAAAC,QAAA2G,IAAA,WAAAvE,GAGA,OAAAd,GAhHAM,eAAA,WACA,UAAAH,MAAA,6DAGAtB,eAAA,SAAAK,GACA,OAAAN,OAAAC,eAAAK,EAAAF,OAGAsG,eAAA,WACA,UAAAnF,MAAA,8DAIA0E,EAAA,GAyBA,SAAAG,EAAA3C,GACA,OAAAA,EAAAM,MAAAN,EAAArD,KAIA,SAAAiG,EAAAtD,EAAAb,GACA,IAAAuB,EAAAV,EAAApD,GACAyB,EAAAV,QAAAW,yBAAAoC,EAAA2C,EAAA3C,GAAAV,EAAAb,GACA,OAAAd,KAAAxB,MAqEA,SAAA2G,EAAA9C,GACAA,EAAAS,WACAT,EAAAS,UAAA,EACAT,EAAAM,KAAA1D,EAAAS,EAAA2C,EAAArD,MAAAqD,EAAAd,QACAc,EAAAd,OAAA,KACAc,EAAAhB,QAAuB8D,EAAA9C,EAAAhB,SA1GvBZ,EAAAqE,EAAA,SAAA3F,EAAAoG,GACAV,EAAA1F,GAAA,WAEA,OADAqG,UAAA,GAAAA,UAAA,MACAD,EAAAE,MAAAnE,KAAAkE,cAIAX,EAAAO,eAAA,SAAA/C,EAAAvB,GACA,GAAA4E,MAAAC,SAAA7E,IACA,UAAAX,MAAA,8CAGA,OAAA2E,EAAAM,eAAAhF,KAAAkB,KAAAe,EAAA,GAAAvB,IAGA+D,EAAAjC,IAAA,SAAAP,EAAAvB,EAAAtC,GACA,cAAAsC,GAAA4E,MAAAC,SAAA7E,IACA,UAAAX,MAAA,uEAGA,OAAA2E,EAAAlC,IAAAxC,KAAAkB,KAAAe,EAAA,GAAAvB,EAAAtC,IA0FA,IAAAoH,EAAAhH,OAAAqF,OAAA,CACAC,aA/KA,aAgLA/B,YAAAsC,IAGA,SAAAoB,EAAAxD,EAAAyD,EAAArE,EAAAK,GACArD,MAAAC,QAAA2D,EAAArD,MAGA,SAAAqD,EAAAyD,EAAArE,EAAAK,GACA,IAAA7C,EAAA8G,EAEA/G,EAAAqD,EAAArD,KACA2D,EAAAN,EAAAM,KACAE,EAAAR,EAAAQ,SAEAF,EAAA/B,OAAA5B,EAAA4B,SACA5B,GAAAC,EAAA,CAAA0D,EAAA3D,IAAA,GAAA2D,EAAA1D,EAAA,GACAwC,GAAAsE,EAAA,CAAAjE,EAAAL,IAAA,GAAAK,EAAAiE,EAAA,IAGA,IAAAC,EAAArD,EAAA/B,OAAA5B,EAAA4B,OAEAqF,EAAA,EAEA,KAAAjH,EAAAiH,KAAAtD,EAAAsD,MAAAjH,EAAA4B,UACAqF,EAIA,IAAAC,EAAAlH,EAAA4B,OAEA,KAAAsF,EAAAD,GAAAjH,EAAAkH,EAAA,KAAAvD,EAAAuD,EAAAF,EAAA,MACAE,EAIA,QAAAvF,EAAAsF,EAAqBtF,EAAAuF,IAASvF,EAC9B,GAAAkC,EAAAlC,IAAAgC,EAAAhC,KAAA3B,EAAA2B,GAAA,CACA,IAAAwF,EAAAL,EAAArG,OAAA,CAAAkB,IACAc,EAAA4B,KAAA,CACA+C,GAAA,UACAD,OACA3H,MAAAmE,EAAAhC,KAEAmB,EAAAuB,KAAA,CACA+C,GAAA,UACAD,OACA3H,MAAAQ,EAAA2B,KAQA,IAHA,IAAA0F,EAAAH,GAAAlH,EAAA4B,OACA0F,EAAA7E,EAAAb,OAEA2D,EAAA2B,EAAAF,EAAA,EAAiCzB,GAAA2B,IAAY3B,EAAA,CAC7C,IAAAgC,EAAAT,EAAArG,OAAA,CAAA8E,IACA9C,EAAA6E,EAAA/B,EAAA2B,GAAA,CACAE,GAAA,MACAD,KAAAI,EACA/H,MAAAmE,EAAA4B,IAGA8B,GACAvE,EAAAuB,KAAA,CACA+C,GAAA,SACAD,KAAAI,IAMAF,GACAvE,EAAAuB,KAAA,CACA+C,GAAA,UACAD,KAAAL,EAAArG,OAAA,YACAjB,MAAAQ,EAAA4B,SAvEA4F,CAAAnE,EAAAyD,EAAArE,EAAAK,GA4EA,SAAAO,EAAAyD,EAAArE,EAAAK,GACA,IAAA9C,EAAAqD,EAAArD,KACA2D,EAAAN,EAAAM,KACAlC,EAAA4B,EAAAQ,SAAA,SAAA1D,EAAAsH,GACA,IAAAC,EAAA1H,EAAAG,GACAX,EAAAmE,EAAAxD,GACAiH,EAAAK,EAAAtH,KAAAH,EAAA,yBACA,GAAA0H,IAAAlI,GAAA,YAAA4H,EAAA,CACA,IAAAD,EAAAL,EAAArG,OAAAN,GACAsC,EAAA4B,KAAA,WAAA+C,EAAA,CACAA,KACAD,QACK,CACLC,KACAD,OACA3H,UAEAsD,EAAAuB,KAAA,QAAA+C,EAAA,CACAA,GAAA,SACAD,QACK,WAAAC,EAAA,CACLA,GAAA,MACAD,OACA3H,MAAAkI,GACK,CACLN,GAAA,UACAD,OACA3H,MAAAkI,OAvGAC,CAAAtE,EAAAyD,EAAArE,EAAAK,GA4GA,SAAA8E,EAAAjF,EAAAF,GACA,QAAAd,EAAA,EAAiBA,EAAAc,EAAAb,OAAoBD,IAAA,CACrC,IAAAkG,EAAApF,EAAAd,GACAwF,EAAAU,EAAAV,KAEA,OAAAA,EAAAvF,QAAA,YAAAiG,EAAAT,GACAzE,EAAAkF,EAAArI,UACK,CAGL,IAFA,IAAAQ,EAAA2C,EAEA4C,EAAA,EAAuBA,EAAA4B,EAAAvF,OAAA,EAAuB2D,IAE9C,KADAvF,IAAAmH,EAAA5B,MACA,iBAAAvF,EAAgD,UAAAmB,MAAA,6CAAAgG,EAAAW,KAAA,MAGhD,IAAA3H,EAAAgH,IAAAvF,OAAA,GAEA,OAAAiG,EAAAT,IACA,cACApH,EAAAG,GAAA0H,EAAArI,MACA,MAEA,UACAC,MAAAC,QAAAM,GAEAA,EAAA+H,OAAA5H,EAAA,EAAA0H,EAAArI,OAEAQ,EAAAG,GAAA0H,EAAArI,MAGA,MAEA,aACAC,MAAAC,QAAAM,GACAA,EAAA+H,OAAA5H,EAAA,UAEAH,EAAAG,GAGA,MAEA,QACA,UAAAgB,MAAA,gCAAA0G,EAAAT,MAKA,OAAAzE,EAKA,IAAAqF,EAAA,CACAC,WAAA,oBAAAtC,OAAA,oBAAArF,QACA4H,gBAAA,IAAA5J,GAAmE,mBAJnE,aAImE6J,KACnEC,SAAA,KACAC,SAAA,KACAC,OAAA,MAEA7J,EAAA,SAAA8J,GACAtI,EAAAqC,KAAA0F,EAAAO,GACAjG,KAAAlD,cAAAkD,KAAA2F,YACA3F,KAAApD,QAAAoD,KAAApD,QAAAsJ,KAAAlG,OAGA7D,EAAAqB,UAAAZ,QAAA,SAAAc,EAAAyI,EAAA5F,GACA,IA0BAsC,EA1BAuD,EAAApG,KAGA,sBAAAtC,GAAA,mBAAAyI,EAAA,CACA,IAAAE,EAAAF,EAGA,OAFAA,EAAAzI,EAEA,SAAAA,QACA,IAAAA,MAAA2I,GAEA,IADA,IAAAC,EAAA,GAAAC,EAAArC,UAAA5E,OAAA,EACAiH,KAAA,GAAAD,EAAAC,GAAArC,UAAAqC,EAAA,GAEA,OAAAH,EAAAxJ,QAAAc,EAAA,SAAA2C,GAAsD,OAAA8F,EAAArH,KAAAqF,MAAAgC,EAAA,CAAA9F,KAAAlC,OAAAmI,OAMtD,sBAAAH,EACA,UAAAtH,MAAA,gEAGA,QAAA0D,IAAAhC,GAAA,mBAAAA,EACA,UAAA1B,MAAA,mEAKA,GAAApC,EAAAiB,GAAA,CACA,IAAAiE,EAAA7B,EAAAa,QACA8C,EAAAzD,KAAAa,YAAAnD,GACA8I,GAAA,EAEA,IACA3D,EAAAsD,EAAArH,KAAA2E,KACA+C,GAAA,EACK,QAELA,EAAqB7E,EAAAvB,SAAwBuB,EAAAlB,QAG7C,OAAAoC,aAAA4D,QACA5D,EAAA6D,KAAA,SAAA7D,GAEA,OADAlB,EAAArB,WAAAC,GACA6F,EAAAO,cAAA9D,EAAAlB,IACO,SAAAiF,GAEP,MADAjF,EAAAvB,SACAwG,KAIAjF,EAAArB,WAAAC,GACAP,KAAA2G,cAAA9D,EAAAlB,IAGA,YAAAY,KADAM,EAAAsD,EAAAzI,IAC+BA,EAC/BmF,IAAAnG,EAAAmG,OAAAN,GAIApG,EAAAqB,UAAAnB,YAAA,SAAAqB,GACA,IAAAjB,EAAAiB,GACA,UAAAmB,MAAA,4FAGA,IAAA8C,EAAA7B,EAAAa,QACA8C,EAAAzD,KAAAa,YAAAnD,GAGA,OAFA+F,EAAAxG,GAAA4J,UAAA,EACAlF,EAAAlB,QACAgD,GAGAtH,EAAAqB,UAAAlB,YAAA,SAAA+D,EAAAE,GACA,IAAAQ,EAAAV,KAAApD,GAEA,IAAA8D,MAAA8F,SACA,UAAAhI,MAAA,6EAGA,GAAAkC,EAAAa,UACA,UAAA/C,MAAA,wCAGA,IAAA8C,EAAAZ,EAAAY,MAEA,OADAA,EAAArB,WAAAC,GACAP,KAAA2G,mBAAApE,EAAAZ,IAGAxF,EAAAqB,UAAAX,cAAA,SAAAK,GACA8C,KAAA4F,WAAA1I,GAGAf,EAAAqB,UAAAV,cAAA,SAAAI,GACA8C,KAAA2F,WAAAzI,EACAS,EAAAqC,KAAA9C,EAAAoH,EAAA5B,IAGAvG,EAAAqB,UAAA8H,aAAA,SAAA5H,EAAAyC,GAEA,OAAA3D,EAAAkB,GACA4H,EAAA5H,EAAAyC,GAIAH,KAAApD,QAAAc,EAAA,SAAA2C,GAA8C,OAAAiF,EAAAjF,EAAAF,MAK9ChE,EAAAqB,UAAAmJ,cAAA,SAAA9D,EAAAlB,GACA,IAAAmF,EAAAnF,EAAA1B,OAAA,GACA6C,OAAAP,IAAAM,OAAAiE,EAGA,GAFA9G,KAAA4C,aAAAjB,EAAAkB,EAAAC,GAEAA,EAAA,CACA,GAAAgE,EAAA7J,GAAAuE,SAEA,MADAG,EAAAvB,SACA,IAAAvB,MAAA,qHAGApC,EAAAoG,KAEAA,EAAA7C,KAAA+G,SAAAlE,EAAA,KAAAlB,IAGAA,EAAAxB,UACAwB,EAAAxB,QAAA4B,KAAA,CACA+C,GAAA,UACAD,KAAA,GACA3H,MAAA2F,IAEAlB,EAAAnB,eAAAuB,KAAA,CACA+C,GAAA,UACAD,KAAA,GACA3H,MAAA4J,EAAA7J,GAAAS,aAKAmF,EAAA7C,KAAA+G,SAAAD,EAAA,GAAAnF,GASA,OANAA,EAAAvB,SAEAuB,EAAAxB,SACAwB,EAAApB,cAAAoB,EAAAxB,QAAAwB,EAAAnB,gBAGAqC,IAAAnG,EAAAmG,OAAAN,GASApG,EAAAqB,UAAAuJ,SAAA,SAAA1G,EAAAwE,EAAAlD,GACA,IAAAyE,EAAApG,KAEAe,EAAAV,EAAApD,GAEA,IAAA8D,EACA,OAAAzD,OAAA0J,SAAA3G,GAAiCA,EACjCL,KAAAiH,aAAA5G,EAAA,KAAAsB,GAIA,GAAAZ,EAAAY,UACA,OAAAtB,EAGA,IAAAU,EAAAS,SACA,OAAAT,EAAArD,KAGA,IAAAqD,EAAAa,UAAA,CAIA,GAHAb,EAAAa,WAAA,EACA5B,KAAAiH,aAAAlG,EAAAV,MAAAwE,EAAAlD,GAEA3B,KAAA+F,SAEA,GAAA/F,KAAA2F,WAAA,CACA,IAAApE,EAAAR,EAAAQ,SAEA,QAAA/B,KAAA+B,EACAA,EAAA/B,IAAgCQ,KAAA+F,SAAAhF,EAAAvB,OAEzB,CACP,IAAA9B,EAAAqD,EAAArD,KACA2D,EAAAN,EAAAM,KACAlC,EAAAzB,EAAA,SAAA8B,GACA1B,EAAAuD,EAAA7B,IAAiC4G,EAAAL,SAAAhF,EAAAvB,KAKjCQ,KAAAgG,QACAhG,KAAAgG,OAAAjF,GAKAf,KAAA4F,YAAAjE,EAAAzB,eACA5C,OAAAqF,OAAA5B,EAAAM,MAGAwD,GAAAlD,EAAAxB,SACAoE,EAAAxD,EAAA8D,EAAAlD,EAAAxB,QAAAwB,EAAAnB,gBAIA,OAAAO,EAAAM,MAQAlF,EAAAqB,UAAAyJ,aAAA,SAAAC,EAAAC,EAAAxF,GACA,IAAAyE,EAAApG,KAEAe,EAAAmG,EAAAjK,GAEA8D,IACAf,KAAA2F,aAEA5E,EAAAM,KAAAjD,EAAA2C,EAAAV,OAAA,IAGA6G,EAAAnG,EAAAM,MAGA,IAAA+F,IAAAD,KAAAxF,EAAAxB,QAEAkH,EAAA,SAAA7H,EAAAtC,EAAA6C,GACA,GAAA7C,IAAA6C,EACA,MAAAlB,MAAA,qCAIA,IAAAyI,IAAAvG,GAAAhB,IAAAmH,EAEA,GAAA1K,EAAAU,GAAA,CACA,IAAA2H,EAAAyC,GAAAF,IAAArG,EAAAQ,SAAA/B,GAAA2H,EAAAhJ,OAAAqB,GAAA,KAkBA,GAdAhD,EAFAU,EAAAkJ,EAAAW,SAAA7J,EAAA2H,EAAAlD,MAGAA,EAAAzB,eAAA,GAIA/C,MAAAC,QAAA2C,IAAAR,EAAAQ,EAAAP,GACAO,EAAAP,GAAAtC,EAEAI,OAAA0B,eAAAe,EAAAP,EAAA,CACAtC,UAKAoK,GAAApK,IAAA6D,EAAArD,KAAA8B,GAAsD,WAEtD,IAAA8H,GAAA3H,EAAAzC,EAAA6D,EAAArD,KAAA8B,IACA,OAEA/C,EAAAS,KAAAI,OAAA0J,SAAA9J,IACAiC,EAAAjC,EAAAmK,GAGAC,GAAAlB,EAAAN,UACAM,EAAAN,SAAA/E,EAAAvB,EAAAtC,IAKA,OADAiC,EAAA+H,EAAAG,GACAH,GAGA,IAAAK,EAAA,IAAApL,EAqBAS,EAAA2K,EAAA3K,QAOAC,EAAA0K,EAAA1K,cAAAqJ,KAAAqB,GAQAzK,EAAAyK,EAAAzK,cAAAoJ,KAAAqB,GAOAnL,EAAAmL,EAAAjC,aAAAY,KAAAqB,GAMAlL,EAAAkL,EAAAlL,YAAA6J,KAAAqB,GAUAjL,EAAAiL,EAAAjL,YAAA4J,KAAAqB,GAEexL,EAAA","file":"js/vendors~vendor-8ac9c304.js","sourcesContent":["var obj;\nvar NOTHING = typeof Symbol !== \"undefined\" ? Symbol(\"immer-nothing\") : ( obj = {}, obj[\"immer-nothing\"] = true, obj );\nvar DRAFTABLE = typeof Symbol !== \"undefined\" ? Symbol.for(\"immer-draftable\") : \"__$immer_draftable\";\nvar DRAFT_STATE = typeof Symbol !== \"undefined\" ? Symbol.for(\"immer-state\") : \"__$immer_state\";\nfunction isDraft(value) {\n  return !!value && !!value[DRAFT_STATE];\n}\nfunction isDraftable(value) {\n  if (!value || typeof value !== \"object\") { return false; }\n  if (Array.isArray(value)) { return true; }\n  var proto = Object.getPrototypeOf(value);\n  if (!proto || proto === Object.prototype) { return true; }\n  return !!value[DRAFTABLE] || !!value.constructor[DRAFTABLE];\n}\nfunction original(value) {\n  if (value && value[DRAFT_STATE]) {\n    return value[DRAFT_STATE].base;\n  } // otherwise return undefined\n\n}\nvar assign = Object.assign || function assign(target, value) {\n  for (var key in value) {\n    if (has(value, key)) {\n      target[key] = value[key];\n    }\n  }\n\n  return target;\n};\nvar ownKeys = typeof Reflect !== \"undefined\" && Reflect.ownKeys ? Reflect.ownKeys : typeof Object.getOwnPropertySymbols !== \"undefined\" ? function (obj) { return Object.getOwnPropertyNames(obj).concat(Object.getOwnPropertySymbols(obj)); } : Object.getOwnPropertyNames;\nfunction shallowCopy(base, invokeGetters) {\n  if ( invokeGetters === void 0 ) invokeGetters = false;\n\n  if (Array.isArray(base)) { return base.slice(); }\n  var clone = Object.create(Object.getPrototypeOf(base));\n  ownKeys(base).forEach(function (key) {\n    if (key === DRAFT_STATE) {\n      return; // Never copy over draft state.\n    }\n\n    var desc = Object.getOwnPropertyDescriptor(base, key);\n    var value = desc.value;\n\n    if (desc.get) {\n      if (!invokeGetters) {\n        throw new Error(\"Immer drafts cannot have computed properties\");\n      }\n\n      value = desc.get.call(base);\n    }\n\n    if (desc.enumerable) {\n      clone[key] = value;\n    } else {\n      Object.defineProperty(clone, key, {\n        value: value,\n        writable: true,\n        configurable: true\n      });\n    }\n  });\n  return clone;\n}\nfunction each(value, cb) {\n  if (Array.isArray(value)) {\n    for (var i = 0; i < value.length; i++) { cb(i, value[i], value); }\n  } else {\n    ownKeys(value).forEach(function (key) { return cb(key, value[key], value); });\n  }\n}\nfunction isEnumerable(base, prop) {\n  return Object.getOwnPropertyDescriptor(base, prop).enumerable;\n}\nfunction has(thing, prop) {\n  return Object.prototype.hasOwnProperty.call(thing, prop);\n}\nfunction is(x, y) {\n  // From: https://github.com/facebook/fbjs/blob/c69904a511b900266935168223063dd8772dfc40/packages/fbjs/src/core/shallowEqual.js\n  if (x === y) {\n    return x !== 0 || 1 / x === 1 / y;\n  } else {\n    return x !== x && y !== y;\n  }\n}\n\n/** Each scope represents a `produce` call. */\n\nvar ImmerScope = function ImmerScope(parent) {\n  this.drafts = [];\n  this.parent = parent; // Whenever the modified draft contains a draft from another scope, we\n  // need to prevent auto-freezing so the unowned draft can be finalized.\n\n  this.canAutoFreeze = true; // To avoid prototype lookups:\n\n  this.patches = null;\n};\n\nImmerScope.prototype.usePatches = function usePatches (patchListener) {\n  if (patchListener) {\n    this.patches = [];\n    this.inversePatches = [];\n    this.patchListener = patchListener;\n  }\n};\n\nImmerScope.prototype.revoke = function revoke$1 () {\n  this.leave();\n  this.drafts.forEach(revoke);\n  this.drafts = null; // Make draft-related methods throw.\n};\n\nImmerScope.prototype.leave = function leave () {\n  if (this === ImmerScope.current) {\n    ImmerScope.current = this.parent;\n  }\n};\nImmerScope.current = null;\n\nImmerScope.enter = function () {\n  return this.current = new ImmerScope(this.current);\n};\n\nfunction revoke(draft) {\n  draft[DRAFT_STATE].revoke();\n}\n\n// but share them all instead\n\nvar descriptors = {};\nfunction willFinalize(scope, result, isReplaced) {\n  scope.drafts.forEach(function (draft) {\n    draft[DRAFT_STATE].finalizing = true;\n  });\n\n  if (!isReplaced) {\n    if (scope.patches) {\n      markChangesRecursively(scope.drafts[0]);\n    } // This is faster when we don't care about which attributes changed.\n\n\n    markChangesSweep(scope.drafts);\n  } // When a child draft is returned, look for changes.\n  else if (isDraft(result) && result[DRAFT_STATE].scope === scope) {\n      markChangesSweep(scope.drafts);\n    }\n}\nfunction createProxy(base, parent) {\n  var isArray = Array.isArray(base);\n  var draft = clonePotentialDraft(base);\n  each(draft, function (prop) {\n    proxyProperty(draft, prop, isArray || isEnumerable(base, prop));\n  }); // See \"proxy.js\" for property documentation.\n\n  var scope = parent ? parent.scope : ImmerScope.current;\n  var state = {\n    scope: scope,\n    modified: false,\n    finalizing: false,\n    // es5 only\n    finalized: false,\n    assigned: {},\n    parent: parent,\n    base: base,\n    draft: draft,\n    copy: null,\n    revoke: revoke$1,\n    revoked: false // es5 only\n\n  };\n  createHiddenProperty(draft, DRAFT_STATE, state);\n  scope.drafts.push(draft);\n  return draft;\n}\n\nfunction revoke$1() {\n  this.revoked = true;\n}\n\nfunction source(state) {\n  return state.copy || state.base;\n} // Access a property without creating an Immer draft.\n\n\nfunction peek(draft, prop) {\n  var state = draft[DRAFT_STATE];\n\n  if (state && !state.finalizing) {\n    state.finalizing = true;\n    var value = draft[prop];\n    state.finalizing = false;\n    return value;\n  }\n\n  return draft[prop];\n}\n\nfunction get(state, prop) {\n  assertUnrevoked(state);\n  var value = peek(source(state), prop);\n  if (state.finalizing) { return value; } // Create a draft if the value is unmodified.\n\n  if (value === peek(state.base, prop) && isDraftable(value)) {\n    prepareCopy(state);\n    return state.copy[prop] = createProxy(value, state);\n  }\n\n  return value;\n}\n\nfunction set(state, prop, value) {\n  assertUnrevoked(state);\n  state.assigned[prop] = true;\n\n  if (!state.modified) {\n    if (is(value, peek(source(state), prop))) { return; }\n    markChanged(state);\n    prepareCopy(state);\n  }\n\n  state.copy[prop] = value;\n}\n\nfunction markChanged(state) {\n  if (!state.modified) {\n    state.modified = true;\n    if (state.parent) { markChanged(state.parent); }\n  }\n}\n\nfunction prepareCopy(state) {\n  if (!state.copy) { state.copy = clonePotentialDraft(state.base); }\n}\n\nfunction clonePotentialDraft(base) {\n  var state = base && base[DRAFT_STATE];\n\n  if (state) {\n    state.finalizing = true;\n    var draft = shallowCopy(state.draft, true);\n    state.finalizing = false;\n    return draft;\n  }\n\n  return shallowCopy(base);\n}\n\nfunction proxyProperty(draft, prop, enumerable) {\n  var desc = descriptors[prop];\n\n  if (desc) {\n    desc.enumerable = enumerable;\n  } else {\n    descriptors[prop] = desc = {\n      configurable: true,\n      enumerable: enumerable,\n\n      get: function get$1() {\n        return get(this[DRAFT_STATE], prop);\n      },\n\n      set: function set$1(value) {\n        set(this[DRAFT_STATE], prop, value);\n      }\n\n    };\n  }\n\n  Object.defineProperty(draft, prop, desc);\n}\n\nfunction assertUnrevoked(state) {\n  if (state.revoked === true) { throw new Error(\"Cannot use a proxy that has been revoked. Did you pass an object from inside an immer function to an async process? \" + JSON.stringify(source(state))); }\n} // This looks expensive, but only proxies are visited, and only objects without known changes are scanned.\n\n\nfunction markChangesSweep(drafts) {\n  // The natural order of drafts in the `scope` array is based on when they\n  // were accessed. By processing drafts in reverse natural order, we have a\n  // better chance of processing leaf nodes first. When a leaf node is known to\n  // have changed, we can avoid any traversal of its ancestor nodes.\n  for (var i = drafts.length - 1; i >= 0; i--) {\n    var state = drafts[i][DRAFT_STATE];\n\n    if (!state.modified) {\n      if (Array.isArray(state.base)) {\n        if (hasArrayChanges(state)) { markChanged(state); }\n      } else if (hasObjectChanges(state)) { markChanged(state); }\n    }\n  }\n}\n\nfunction markChangesRecursively(object) {\n  if (!object || typeof object !== \"object\") { return; }\n  var state = object[DRAFT_STATE];\n  if (!state) { return; }\n  var base = state.base;\n  var draft = state.draft;\n  var assigned = state.assigned;\n\n  if (!Array.isArray(object)) {\n    // Look for added keys.\n    Object.keys(draft).forEach(function (key) {\n      // The `undefined` check is a fast path for pre-existing keys.\n      if (base[key] === undefined && !has(base, key)) {\n        assigned[key] = true;\n        markChanged(state);\n      } else if (!assigned[key]) {\n        // Only untouched properties trigger recursion.\n        markChangesRecursively(draft[key]);\n      }\n    }); // Look for removed keys.\n\n    Object.keys(base).forEach(function (key) {\n      // The `undefined` check is a fast path for pre-existing keys.\n      if (draft[key] === undefined && !has(draft, key)) {\n        assigned[key] = false;\n        markChanged(state);\n      }\n    });\n  } else if (hasArrayChanges(state)) {\n    markChanged(state);\n    assigned.length = true;\n\n    if (draft.length < base.length) {\n      for (var i = draft.length; i < base.length; i++) { assigned[i] = false; }\n    } else {\n      for (var i$1 = base.length; i$1 < draft.length; i$1++) { assigned[i$1] = true; }\n    }\n\n    for (var i$2 = 0; i$2 < draft.length; i$2++) {\n      // Only untouched indices trigger recursion.\n      if (assigned[i$2] === undefined) { markChangesRecursively(draft[i$2]); }\n    }\n  }\n}\n\nfunction hasObjectChanges(state) {\n  var base = state.base;\n  var draft = state.draft; // Search for added keys and changed keys. Start at the back, because\n  // non-numeric keys are ordered by time of definition on the object.\n\n  var keys = Object.keys(draft);\n\n  for (var i = keys.length - 1; i >= 0; i--) {\n    var key = keys[i];\n    var baseValue = base[key]; // The `undefined` check is a fast path for pre-existing keys.\n\n    if (baseValue === undefined && !has(base, key)) {\n      return true;\n    } // Once a base key is deleted, future changes go undetected, because its\n    // descriptor is erased. This branch detects any missed changes.\n    else {\n        var value = draft[key];\n        var state$1 = value && value[DRAFT_STATE];\n\n        if (state$1 ? state$1.base !== baseValue : !is(value, baseValue)) {\n          return true;\n        }\n      }\n  } // At this point, no keys were added or changed.\n  // Compare key count to determine if keys were deleted.\n\n\n  return keys.length !== Object.keys(base).length;\n}\n\nfunction hasArrayChanges(state) {\n  var draft = state.draft;\n  if (draft.length !== state.base.length) { return true; } // See #116\n  // If we first shorten the length, our array interceptors will be removed.\n  // If after that new items are added, result in the same original length,\n  // those last items will have no intercepting property.\n  // So if there is no own descriptor on the last position, we know that items were removed and added\n  // N.B.: splice, unshift, etc only shift values around, but not prop descriptors, so we only have to check\n  // the last one\n\n  var descriptor = Object.getOwnPropertyDescriptor(draft, draft.length - 1); // descriptor can be null, but only for newly created sparse arrays, eg. new Array(10)\n\n  if (descriptor && !descriptor.get) { return true; } // For all other cases, we don't have to compare, as they would have been picked up by the index setters\n\n  return false;\n}\n\nfunction createHiddenProperty(target, prop, value) {\n  Object.defineProperty(target, prop, {\n    value: value,\n    enumerable: false,\n    writable: true\n  });\n}\n\nvar legacyProxy = /*#__PURE__*/Object.freeze({\n    willFinalize: willFinalize,\n    createProxy: createProxy\n});\n\nfunction willFinalize$1() {}\nfunction createProxy$1(base, parent) {\n  var scope = parent ? parent.scope : ImmerScope.current;\n  var state = {\n    // Track which produce call this is associated with.\n    scope: scope,\n    // True for both shallow and deep changes.\n    modified: false,\n    // Used during finalization.\n    finalized: false,\n    // Track which properties have been assigned (true) or deleted (false).\n    assigned: {},\n    // The parent draft state.\n    parent: parent,\n    // The base state.\n    base: base,\n    // The base proxy.\n    draft: null,\n    // Any property proxies.\n    drafts: {},\n    // The base copy with any updated values.\n    copy: null,\n    // Called by the `produce` function.\n    revoke: null\n  };\n  var ref = Array.isArray(base) ? // [state] is used for arrays, to make sure the proxy is array-ish and not violate invariants,\n  // although state itself is an object\n  Proxy.revocable([state], arrayTraps) : Proxy.revocable(state, objectTraps);\n  var revoke = ref.revoke;\n  var proxy = ref.proxy;\n  state.draft = proxy;\n  state.revoke = revoke;\n  scope.drafts.push(proxy);\n  return proxy;\n}\nvar objectTraps = {\n  get: get$1,\n\n  has: function has(target, prop) {\n    return prop in source$1(target);\n  },\n\n  ownKeys: function ownKeys(target) {\n    return Reflect.ownKeys(source$1(target));\n  },\n\n  set: set$1,\n  deleteProperty: deleteProperty,\n  getOwnPropertyDescriptor: getOwnPropertyDescriptor,\n\n  defineProperty: function defineProperty() {\n    throw new Error(\"Object.defineProperty() cannot be used on an Immer draft\"); // prettier-ignore\n  },\n\n  getPrototypeOf: function getPrototypeOf(target) {\n    return Object.getPrototypeOf(target.base);\n  },\n\n  setPrototypeOf: function setPrototypeOf() {\n    throw new Error(\"Object.setPrototypeOf() cannot be used on an Immer draft\"); // prettier-ignore\n  }\n\n};\nvar arrayTraps = {};\neach(objectTraps, function (key, fn) {\n  arrayTraps[key] = function () {\n    arguments[0] = arguments[0][0];\n    return fn.apply(this, arguments);\n  };\n});\n\narrayTraps.deleteProperty = function (state, prop) {\n  if (isNaN(parseInt(prop))) {\n    throw new Error(\"Immer only supports deleting array indices\"); // prettier-ignore\n  }\n\n  return objectTraps.deleteProperty.call(this, state[0], prop);\n};\n\narrayTraps.set = function (state, prop, value) {\n  if (prop !== \"length\" && isNaN(parseInt(prop))) {\n    throw new Error(\"Immer only supports setting array indices and the 'length' property\"); // prettier-ignore\n  }\n\n  return objectTraps.set.call(this, state[0], prop, value);\n}; // returns the object we should be reading the current value from, which is base, until some change has been made\n\n\nfunction source$1(state) {\n  return state.copy || state.base;\n} // Access a property without creating an Immer draft.\n\n\nfunction peek$1(draft, prop) {\n  var state = draft[DRAFT_STATE];\n  var desc = Reflect.getOwnPropertyDescriptor(state ? source$1(state) : draft, prop);\n  return desc && desc.value;\n}\n\nfunction get$1(state, prop) {\n  if (prop === DRAFT_STATE) { return state; }\n  var drafts = state.drafts; // Check for existing draft in unmodified state.\n\n  if (!state.modified && has(drafts, prop)) {\n    return drafts[prop];\n  }\n\n  var value = source$1(state)[prop];\n\n  if (state.finalized || !isDraftable(value)) {\n    return value;\n  } // Check for existing draft in modified state.\n\n\n  if (state.modified) {\n    // Assigned values are never drafted. This catches any drafts we created, too.\n    if (value !== peek$1(state.base, prop)) { return value; } // Store drafts on the copy (when one exists).\n\n    drafts = state.copy;\n  }\n\n  return drafts[prop] = createProxy$1(value, state);\n}\n\nfunction set$1(state, prop, value) {\n  if (!state.modified) {\n    var baseValue = peek$1(state.base, prop); // Optimize based on value's truthiness. Truthy values are guaranteed to\n    // never be undefined, so we can avoid the `in` operator. Lastly, truthy\n    // values may be drafts, but falsy values are never drafts.\n\n    var isUnchanged = value ? is(baseValue, value) || value === state.drafts[prop] : is(baseValue, value) && prop in state.base;\n    if (isUnchanged) { return true; }\n    markChanged$1(state);\n  }\n\n  state.assigned[prop] = true;\n  state.copy[prop] = value;\n  return true;\n}\n\nfunction deleteProperty(state, prop) {\n  // The `undefined` check is a fast path for pre-existing keys.\n  if (peek$1(state.base, prop) !== undefined || prop in state.base) {\n    state.assigned[prop] = false;\n    markChanged$1(state);\n  }\n\n  if (state.copy) { delete state.copy[prop]; }\n  return true;\n} // Note: We never coerce `desc.value` into an Immer draft, because we can't make\n// the same guarantee in ES5 mode.\n\n\nfunction getOwnPropertyDescriptor(state, prop) {\n  var owner = source$1(state);\n  var desc = Reflect.getOwnPropertyDescriptor(owner, prop);\n\n  if (desc) {\n    desc.writable = true;\n    desc.configurable = !Array.isArray(owner) || prop !== \"length\";\n  }\n\n  return desc;\n}\n\nfunction markChanged$1(state) {\n  if (!state.modified) {\n    state.modified = true;\n    state.copy = assign(shallowCopy(state.base), state.drafts);\n    state.drafts = null;\n    if (state.parent) { markChanged$1(state.parent); }\n  }\n}\n\nvar modernProxy = /*#__PURE__*/Object.freeze({\n    willFinalize: willFinalize$1,\n    createProxy: createProxy$1\n});\n\nfunction generatePatches(state, basePath, patches, inversePatches) {\n  Array.isArray(state.base) ? generateArrayPatches(state, basePath, patches, inversePatches) : generateObjectPatches(state, basePath, patches, inversePatches);\n}\n\nfunction generateArrayPatches(state, basePath, patches, inversePatches) {\n  var assign, assign$1;\n\n  var base = state.base;\n  var copy = state.copy;\n  var assigned = state.assigned; // Reduce complexity by ensuring `base` is never longer.\n\n  if (copy.length < base.length) {\n    (assign = [copy, base], base = assign[0], copy = assign[1]);\n    (assign$1 = [inversePatches, patches], patches = assign$1[0], inversePatches = assign$1[1]);\n  }\n\n  var delta = copy.length - base.length; // Find the first replaced index.\n\n  var start = 0;\n\n  while (base[start] === copy[start] && start < base.length) {\n    ++start;\n  } // Find the last replaced index. Search from the end to optimize splice patches.\n\n\n  var end = base.length;\n\n  while (end > start && base[end - 1] === copy[end + delta - 1]) {\n    --end;\n  } // Process replaced indices.\n\n\n  for (var i = start; i < end; ++i) {\n    if (assigned[i] && copy[i] !== base[i]) {\n      var path = basePath.concat([i]);\n      patches.push({\n        op: \"replace\",\n        path: path,\n        value: copy[i]\n      });\n      inversePatches.push({\n        op: \"replace\",\n        path: path,\n        value: base[i]\n      });\n    }\n  }\n\n  var useRemove = end != base.length;\n  var replaceCount = patches.length; // Process added indices.\n\n  for (var i$1 = end + delta - 1; i$1 >= end; --i$1) {\n    var path$1 = basePath.concat([i$1]);\n    patches[replaceCount + i$1 - end] = {\n      op: \"add\",\n      path: path$1,\n      value: copy[i$1]\n    };\n\n    if (useRemove) {\n      inversePatches.push({\n        op: \"remove\",\n        path: path$1\n      });\n    }\n  } // One \"replace\" patch reverses all non-splicing \"add\" patches.\n\n\n  if (!useRemove) {\n    inversePatches.push({\n      op: \"replace\",\n      path: basePath.concat([\"length\"]),\n      value: base.length\n    });\n  }\n}\n\nfunction generateObjectPatches(state, basePath, patches, inversePatches) {\n  var base = state.base;\n  var copy = state.copy;\n  each(state.assigned, function (key, assignedValue) {\n    var origValue = base[key];\n    var value = copy[key];\n    var op = !assignedValue ? \"remove\" : key in base ? \"replace\" : \"add\";\n    if (origValue === value && op === \"replace\") { return; }\n    var path = basePath.concat(key);\n    patches.push(op === \"remove\" ? {\n      op: op,\n      path: path\n    } : {\n      op: op,\n      path: path,\n      value: value\n    });\n    inversePatches.push(op === \"add\" ? {\n      op: \"remove\",\n      path: path\n    } : op === \"remove\" ? {\n      op: \"add\",\n      path: path,\n      value: origValue\n    } : {\n      op: \"replace\",\n      path: path,\n      value: origValue\n    });\n  });\n}\n\nfunction applyPatches(draft, patches) {\n  for (var i = 0; i < patches.length; i++) {\n    var patch = patches[i];\n    var path = patch.path;\n\n    if (path.length === 0 && patch.op === \"replace\") {\n      draft = patch.value;\n    } else {\n      var base = draft;\n\n      for (var i$1 = 0; i$1 < path.length - 1; i$1++) {\n        base = base[path[i$1]];\n        if (!base || typeof base !== \"object\") { throw new Error(\"Cannot apply patch, path doesn't resolve: \" + path.join(\"/\")); } // prettier-ignore\n      }\n\n      var key = path[path.length - 1];\n\n      switch (patch.op) {\n        case \"replace\":\n          base[key] = patch.value;\n          break;\n\n        case \"add\":\n          if (Array.isArray(base)) {\n            // TODO: support \"foo/-\" paths for appending to an array\n            base.splice(key, 0, patch.value);\n          } else {\n            base[key] = patch.value;\n          }\n\n          break;\n\n        case \"remove\":\n          if (Array.isArray(base)) {\n            base.splice(key, 1);\n          } else {\n            delete base[key];\n          }\n\n          break;\n\n        default:\n          throw new Error(\"Unsupported patch operation: \" + patch.op);\n      }\n    }\n  }\n\n  return draft;\n}\n\nfunction verifyMinified() {}\n\nvar configDefaults = {\n  useProxies: typeof Proxy !== \"undefined\" && typeof Reflect !== \"undefined\",\n  autoFreeze: typeof process !== \"undefined\" ? process.env.NODE_ENV !== \"production\" : verifyMinified.name === \"verifyMinified\",\n  onAssign: null,\n  onDelete: null,\n  onCopy: null\n};\nvar Immer = function Immer(config) {\n  assign(this, configDefaults, config);\n  this.setUseProxies(this.useProxies);\n  this.produce = this.produce.bind(this);\n};\n\nImmer.prototype.produce = function produce (base, recipe, patchListener) {\n    var this$1 = this;\n\n  // curried invocation\n  if (typeof base === \"function\" && typeof recipe !== \"function\") {\n    var defaultBase = recipe;\n    recipe = base; // prettier-ignore\n\n    return function (base) {\n        if ( base === void 0 ) base = defaultBase;\n        var args = [], len = arguments.length - 1;\n        while ( len-- > 0 ) args[ len ] = arguments[ len + 1 ];\n\n        return this$1.produce(base, function (draft) { return recipe.call.apply(recipe, [ draft, draft ].concat( args )); });\n      };\n  } // prettier-ignore\n\n\n  {\n    if (typeof recipe !== \"function\") {\n      throw new Error(\"The first or second argument to `produce` must be a function\");\n    }\n\n    if (patchListener !== undefined && typeof patchListener !== \"function\") {\n      throw new Error(\"The third argument to `produce` must be a function or undefined\");\n    }\n  }\n  var result; // Only plain objects, arrays, and \"immerable classes\" are drafted.\n\n  if (isDraftable(base)) {\n    var scope = ImmerScope.enter();\n    var proxy = this.createProxy(base);\n    var hasError = true;\n\n    try {\n      result = recipe.call(proxy, proxy);\n      hasError = false;\n    } finally {\n      // finally instead of catch + rethrow better preserves original stack\n      if (hasError) { scope.revoke(); }else { scope.leave(); }\n    }\n\n    if (result instanceof Promise) {\n      return result.then(function (result) {\n        scope.usePatches(patchListener);\n        return this$1.processResult(result, scope);\n      }, function (error) {\n        scope.revoke();\n        throw error;\n      });\n    }\n\n    scope.usePatches(patchListener);\n    return this.processResult(result, scope);\n  } else {\n    result = recipe(base);\n    if (result === undefined) { return base; }\n    return result !== NOTHING ? result : undefined;\n  }\n};\n\nImmer.prototype.createDraft = function createDraft (base) {\n  if (!isDraftable(base)) {\n    throw new Error(\"First argument to `createDraft` must be a plain object, an array, or an immerable object\"); // prettier-ignore\n  }\n\n  var scope = ImmerScope.enter();\n  var proxy = this.createProxy(base);\n  proxy[DRAFT_STATE].isManual = true;\n  scope.leave();\n  return proxy;\n};\n\nImmer.prototype.finishDraft = function finishDraft (draft, patchListener) {\n  var state = draft && draft[DRAFT_STATE];\n\n  if (!state || !state.isManual) {\n    throw new Error(\"First argument to `finishDraft` must be a draft returned by `createDraft`\"); // prettier-ignore\n  }\n\n  if (state.finalized) {\n    throw new Error(\"The given draft is already finalized\"); // prettier-ignore\n  }\n\n  var scope = state.scope;\n  scope.usePatches(patchListener);\n  return this.processResult(undefined, scope);\n};\n\nImmer.prototype.setAutoFreeze = function setAutoFreeze (value) {\n  this.autoFreeze = value;\n};\n\nImmer.prototype.setUseProxies = function setUseProxies (value) {\n  this.useProxies = value;\n  assign(this, value ? modernProxy : legacyProxy);\n};\n\nImmer.prototype.applyPatches = function applyPatches$1 (base, patches) {\n  // Mutate the base state when a draft is passed.\n  if (isDraft(base)) {\n    return applyPatches(base, patches);\n  } // Otherwise, produce a copy of the base state.\n\n\n  return this.produce(base, function (draft) { return applyPatches(draft, patches); });\n};\n/** @internal */\n\n\nImmer.prototype.processResult = function processResult (result, scope) {\n  var baseDraft = scope.drafts[0];\n  var isReplaced = result !== undefined && result !== baseDraft;\n  this.willFinalize(scope, result, isReplaced);\n\n  if (isReplaced) {\n    if (baseDraft[DRAFT_STATE].modified) {\n      scope.revoke();\n      throw new Error(\"An immer producer returned a new value *and* modified its draft. Either return a new value *or* modify the draft.\"); // prettier-ignore\n    }\n\n    if (isDraftable(result)) {\n      // Finalize the result in case it contains (or is) a subset of the draft.\n      result = this.finalize(result, null, scope);\n    }\n\n    if (scope.patches) {\n      scope.patches.push({\n        op: \"replace\",\n        path: [],\n        value: result\n      });\n      scope.inversePatches.push({\n        op: \"replace\",\n        path: [],\n        value: baseDraft[DRAFT_STATE].base\n      });\n    }\n  } else {\n    // Finalize the base draft.\n    result = this.finalize(baseDraft, [], scope);\n  }\n\n  scope.revoke();\n\n  if (scope.patches) {\n    scope.patchListener(scope.patches, scope.inversePatches);\n  }\n\n  return result !== NOTHING ? result : undefined;\n};\n/**\n * @internal\n * Finalize a draft, returning either the unmodified base state or a modified\n * copy of the base state.\n */\n\n\nImmer.prototype.finalize = function finalize (draft, path, scope) {\n    var this$1 = this;\n\n  var state = draft[DRAFT_STATE];\n\n  if (!state) {\n    if (Object.isFrozen(draft)) { return draft; }\n    return this.finalizeTree(draft, null, scope);\n  } // Never finalize drafts owned by another scope.\n\n\n  if (state.scope !== scope) {\n    return draft;\n  }\n\n  if (!state.modified) {\n    return state.base;\n  }\n\n  if (!state.finalized) {\n    state.finalized = true;\n    this.finalizeTree(state.draft, path, scope);\n\n    if (this.onDelete) {\n      // The `assigned` object is unreliable with ES5 drafts.\n      if (this.useProxies) {\n        var assigned = state.assigned;\n\n        for (var prop in assigned) {\n          if (!assigned[prop]) { this.onDelete(state, prop); }\n        }\n      } else {\n        var base = state.base;\n          var copy = state.copy;\n        each(base, function (prop) {\n          if (!has(copy, prop)) { this$1.onDelete(state, prop); }\n        });\n      }\n    }\n\n    if (this.onCopy) {\n      this.onCopy(state);\n    } // At this point, all descendants of `state.copy` have been finalized,\n    // so we can be sure that `scope.canAutoFreeze` is accurate.\n\n\n    if (this.autoFreeze && scope.canAutoFreeze) {\n      Object.freeze(state.copy);\n    }\n\n    if (path && scope.patches) {\n      generatePatches(state, path, scope.patches, scope.inversePatches);\n    }\n  }\n\n  return state.copy;\n};\n/**\n * @internal\n * Finalize all drafts in the given state tree.\n */\n\n\nImmer.prototype.finalizeTree = function finalizeTree (root, rootPath, scope) {\n    var this$1 = this;\n\n  var state = root[DRAFT_STATE];\n\n  if (state) {\n    if (!this.useProxies) {\n      // Create the final copy, with added keys and without deleted keys.\n      state.copy = shallowCopy(state.draft, true);\n    }\n\n    root = state.copy;\n  }\n\n  var needPatches = !!rootPath && !!scope.patches;\n\n  var finalizeProperty = function (prop, value, parent) {\n    if (value === parent) {\n      throw Error(\"Immer forbids circular references\");\n    } // In the `finalizeTree` method, only the `root` object may be a draft.\n\n\n    var isDraftProp = !!state && parent === root;\n\n    if (isDraft(value)) {\n      var path = isDraftProp && needPatches && !state.assigned[prop] ? rootPath.concat(prop) : null; // Drafts owned by `scope` are finalized here.\n\n      value = this$1.finalize(value, path, scope); // Drafts from another scope must prevent auto-freezing.\n\n      if (isDraft(value)) {\n        scope.canAutoFreeze = false;\n      } // Preserve non-enumerable properties.\n\n\n      if (Array.isArray(parent) || isEnumerable(parent, prop)) {\n        parent[prop] = value;\n      } else {\n        Object.defineProperty(parent, prop, {\n          value: value\n        });\n      } // Unchanged drafts are never passed to the `onAssign` hook.\n\n\n      if (isDraftProp && value === state.base[prop]) { return; }\n    } // Unchanged draft properties are ignored.\n    else if (isDraftProp && is(value, state.base[prop])) {\n        return;\n      } // Search new objects for unfinalized drafts. Frozen objects should never contain drafts.\n      else if (isDraftable(value) && !Object.isFrozen(value)) {\n          each(value, finalizeProperty);\n        }\n\n    if (isDraftProp && this$1.onAssign) {\n      this$1.onAssign(state, prop, value);\n    }\n  };\n\n  each(root, finalizeProperty);\n  return root;\n};\n\nvar immer = new Immer();\n/**\n * The `produce` function takes a value and a \"recipe function\" (whose\n * return value often depends on the base state). The recipe function is\n * free to mutate its first argument however it wants. All mutations are\n * only ever applied to a __copy__ of the base state.\n *\n * Pass only a function to create a \"curried producer\" which relieves you\n * from passing the recipe function every time.\n *\n * Only plain objects and arrays are made mutable. All other objects are\n * considered uncopyable.\n *\n * Note: This function is __bound__ to its `Immer` instance.\n *\n * @param {any} base - the initial state\n * @param {Function} producer - function that receives a proxy of the base state as first argument and which can be freely modified\n * @param {Function} patchListener - optional function that will be called with all the patches produced here\n * @returns {any} a new state, or the initial state if nothing was modified\n */\n\nvar produce = immer.produce;\n/**\n * Pass true to automatically freeze all copies created by Immer.\n *\n * By default, auto-freezing is disabled in production.\n */\n\nvar setAutoFreeze = immer.setAutoFreeze.bind(immer);\n/**\n * Pass true to use the ES2015 `Proxy` class when creating drafts, which is\n * always faster than using ES5 proxies.\n *\n * By default, feature detection is used, so calling this is rarely necessary.\n */\n\nvar setUseProxies = immer.setUseProxies.bind(immer);\n/**\n * Apply an array of Immer patches to the first argument.\n *\n * This function is a producer, which means copy-on-write is in effect.\n */\n\nvar applyPatches$1 = immer.applyPatches.bind(immer);\n/**\n * Create an Immer draft from the given base state, which may be a draft itself.\n * The draft can be modified until you finalize it with the `finishDraft` function.\n */\n\nvar createDraft = immer.createDraft.bind(immer);\n/**\n * Finalize an Immer draft from a `createDraft` call, returning the base state\n * (if no changes were made) or a modified copy. The draft must *not* be\n * mutated afterwards.\n *\n * Pass a function as the 2nd argument to generate Immer patches based on the\n * changes that were made.\n */\n\nvar finishDraft = immer.finishDraft.bind(immer);\n\nexport default produce;\nexport { Immer, applyPatches$1 as applyPatches, createDraft, finishDraft, DRAFTABLE as immerable, isDraft, isDraftable, NOTHING as nothing, original, produce, setAutoFreeze, setUseProxies };\n//# sourceMappingURL=immer.module.js.map\n"],"sourceRoot":""}